{
	"info": {
		"_postman_id": "5f61a4fe-b4bd-4b2b-9c89-2e878a99bc2c",
		"name": "Nest Example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31682331"
	},
	"item": [
		{
			"name": "Get Token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						},
						{
							"key": "username",
							"value": "user",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "postman",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/auth/realms/nest-example/protocol/openid-connect/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"realms",
						"nest-example",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get public",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000"
				}
			},
			"response": []
		},
		{
			"name": "Get unauthorized",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/unauthorized",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"unauthorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get admin",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/admin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"admin"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const user = pm.collectionVariables.get(\"user\");",
					"",
					"if(!user) {",
					"    throw new Error(\"'user' is not set\");",
					"}",
					"",
					"console.log(`Using user: ${user}`);",
					"",
					"const loginRequest = {",
					"    url: 'http://localhost:8080/auth/realms/master/protocol/openid-connect/token',",
					"    method: 'POST',",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            { key: \"grant_type\", value: \"password\", disabled: false },",
					"            { key: \"username\", value: user, disabled: false },",
					"            { key: \"password\", value: user, disabled: false },",
					"            { key: \"scope\", value: \"openid\", disabled: false },",
					"            { key: \"client_id\", value: \"postman\", disabled: false },",
					"        ]",
					"    }",
					"};",
					"",
					"// All in seconds",
					"const currentTime = Math.floor(new Date().getTime() / 1000);",
					"const expiryTime = parseInt(pm.collectionVariables.get('tokenExpiry'));",
					"",
					"if(expiryTime > currentTime) return;",
					"",
					"pm.sendRequest(loginRequest, (error, response) => {",
					"    if(error) {",
					"        console.log(error);",
					"        throw error;",
					"    }",
					"    const result = response.json();",
					"",
					"    if(\"error\" in result) {",
					"        console.log(result.error);",
					"        throw result.error;",
					"    }",
					"",
					"    console.log(`Keycloak response was: `, result);",
					"",
					"    const accessToken = result.access_token;",
					"    const expiresIn = result.expires_in;",
					"",
					"    pm.collectionVariables.set('token', accessToken);",
					"    pm.collectionVariables.set('tokenExpiry', currentTime + expiresIn);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenExpiry",
			"value": "1618197764"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "user",
			"value": "user",
			"type": "string"
		}
	]
}